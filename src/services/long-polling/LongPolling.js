/*
=====================================================================
                          LONG POLLING 
=====================================================================
A tÃ©cnica de long polling Ã© baseada em um tipo especial de solicitaÃ§Ã£o
HTTP, chamado de "requisiÃ§Ã£o pendente" (pending request) ou "requisiÃ§Ã£o
de espera" (wait request), que Ã© uma solicitaÃ§Ã£o HTTP que permanece aberta
por um perÃ­odo prolongado de tempo (em contraste com a solicitaÃ§Ã£o HTTP convencional, 
que Ã© feita e respondida imediatamente). 
Quando o servidor tem novas informaÃ§Ãµes para enviar, 
ele envia uma resposta para a solicitaÃ§Ã£o pendente, que o cliente pode 
processar e exibir no navegador.

*/ 

/* 

Neste cÃ³digo: o long polling Ã© implementado usando uma solicitaÃ§Ã£o HTTP GET 
que permanece aberta por um longo perÃ­odo de tempo (DELAY). 
Quando um cliente faz uma solicitaÃ§Ã£o GET para /date, o servidor 
adiciona a conexÃ£o do cliente a um array de conexÃµes (connections). 
Quando o servidor tem novas informaÃ§Ãµes para enviar, 
ele percorre o array de conexÃµes e envia uma mensagem para cada conexÃ£o 
pendente, atualizando assim os clientes em tempo real.


*/

const express = require("express")

const LIMIT = 7;
const DELAY = 1000;

const app = express()

const connections = [] //Armazenar todas as conexÃµes abertas.

app.get("/date", (req, res, next) => {
  res.setHeader("Content-Type", "text/html; charset=utf-8") //define o tipo de texto q serÃ¡ retornado
  res.setHeader("Transfer-Encoding", "chunked")
  
  /* 
    MÃ©todo de codificaÃ§Ã£o chunked permite que o servidor comece a enviar
    a resposta http sem saber seu tamanho total. 
    o conteÃºdo da resposta Ã© dividido em uma 
    sÃ©rie de "chunks" ou blocos de tamanho variÃ¡vel.
    a conexÃ£o permanece aberta atÃ© que a Ãºltima parte da resposta seja enviada.

    compatÃ­vel com o uso do long polling para atualizaÃ§Ãµes em tempo real.
  
  */

  connections.push(res) // Armazena a conexÃ£o atual no array de conexÃµes.
})

let tick = 0;

setTimeout(function run() {
  console.log(tick)
  if(++tick > LIMIT){
    connections.map(res => {
      res.write("END\n")
      res.end()
    })
    connections = [];
    tick = 0
  }
  connections.map((res, i) => { //itera sobre cada conexÃ£o do array
    res.write(` ðŸ‘Œ ðŸ‘Œ Hello ${i}! Tick: ${tick} \n`)
  })
  setTimeout(run, DELAY)
}, DELAY)

const PORT = 3000;

app.listen(PORT, () => {
  console.log(`The server is running on port ${PORT}`)
})